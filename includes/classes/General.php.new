<?php
// 种火集结号 - 武将类

class General {
    private $db;
    private $generalId;
    private $ownerId;
    private $name;
    private $source;
    private $rarity;
    private $cost;
    private $element;
    private $level;
    private $hp;
    private $maxHp;
    private $attack;
    private $defense;
    private $speed;
    private $intelligence;
    private $isActive;
    private $createdAt;
    private $skills = [];
    private $assignment = null;
    private $isValid = false;

    /**
     * 构造函数
     * @param int $generalId 武将ID
     */
    public function __construct($generalId = null) {
        $this->db = Database::getInstance()->getConnection();

        if ($generalId !== null) {
            $this->generalId = $generalId;
            $this->loadGeneralData();
        }
    }

    /**
     * 加载武将数据
     */
    private function loadGeneralData() {
        $query = "SELECT * FROM generals WHERE general_id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param('i', $this->generalId);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result && $result->num_rows > 0) {
            $generalData = $result->fetch_assoc();
            $this->ownerId = $generalData['owner_id'];
            $this->name = $generalData['name'];
            $this->source = $generalData['source'];
            $this->rarity = $generalData['rarity'];
            $this->cost = $generalData['cost'];
            $this->element = $generalData['element'];
            $this->level = $generalData['level'];
            $this->hp = $generalData['hp'];
            $this->maxHp = $generalData['max_hp'];
            $this->attack = $generalData['attack'];
            $this->defense = $generalData['defense'];
            $this->speed = $generalData['speed'];
            $this->intelligence = $generalData['intelligence'];
            $this->isActive = $generalData['is_active'];
            $this->createdAt = $generalData['created_at'];
            $this->isValid = true;

            // 加载武将技能
            $this->loadGeneralSkills();

            // 加载武将分配信息
            $this->loadGeneralAssignment();
        }

        $stmt->close();
    }

    /**
     * 加载武将技能
     */
    private function loadGeneralSkills() {
        $query = "SELECT * FROM general_skills WHERE general_id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param('i', $this->generalId);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result) {
            while ($row = $result->fetch_assoc()) {
                $skill = new GeneralSkill($row['skill_id']);
                if ($skill->isValid()) {
                    $this->skills[] = $skill;
                }
            }
        }

        $stmt->close();
    }

    /**
     * 加载武将分配信息
     */
    private function loadGeneralAssignment() {
        $query = "SELECT * FROM general_assignments WHERE general_id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param('i', $this->generalId);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result && $result->num_rows > 0) {
            $row = $result->fetch_assoc();
            $this->assignment = new GeneralAssignment($row['assignment_id']);
        }

        $stmt->close();
    }

    /**
     * 创建新武将
     * @param int $ownerId 拥有者ID
     * @param string $name 武将名称
     * @param string $source 武将来源
     * @param string $rarity 武将稀有度
     * @param float $cost 武将COST
     * @param string $element 武将元素
     * @param array $attributes 武将属性
     * @return bool|int 成功返回武将ID，失败返回false
     */
    public function createGeneral($ownerId, $name, $source, $rarity, $cost, $element, $attributes) {
        // 检查参数
        if (empty($name) || empty($rarity) || empty($element) || empty($attributes)) {
            return false;
        }

        // 检查稀有度是否有效
        $validRarities = ['B', 'A', 'S', 'SS', 'P'];
        if (!in_array($rarity, $validRarities)) {
            return false;
        }

        // 检查元素是否有效
        $validElements = ['亮晶晶', '暖洋洋', '冷冰冰', '郁萌萌', '昼闪闪', '夜静静'];
        if (!in_array($element, $validElements)) {
            return false;
        }

        // 检查属性是否完整
        $requiredAttributes = ['attack', 'defense', 'speed', 'intelligence'];
        foreach ($requiredAttributes as $attr) {
            if (!isset($attributes[$attr])) {
                return false;
            }
        }

        // 创建武将记录
        $query = "INSERT INTO generals (owner_id, name, source, rarity, cost, element, hp, max_hp, attack, defense, speed, intelligence)
                 VALUES (?, ?, ?, ?, ?, ?, 100, 100, ?, ?, ?, ?)";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param('isssdsiiiii', $ownerId, $name, $source, $rarity, $cost, $element,
                         $attributes['attack'], $attributes['defense'], $attributes['speed'], $attributes['intelligence']);
        $result = $stmt->execute();

        if (!$result) {
            $stmt->close();
            return false;
        }

        $generalId = $this->db->insert_id;
        $stmt->close();

        // 设置对象属性
        $this->generalId = $generalId;
        $this->ownerId = $ownerId;
        $this->name = $name;
        $this->source = $source;
        $this->rarity = $rarity;
        $this->cost = $cost;
        $this->element = $element;
        $this->level = 1;
        $this->hp = 100;
        $this->maxHp = 100;
        $this->attack = $attributes['attack'];
        $this->defense = $attributes['defense'];
        $this->speed = $attributes['speed'];
        $this->intelligence = $attributes['intelligence'];
        $this->isActive = 1;
        $this->createdAt = date('Y-m-d H:i:s');
        $this->isValid = true;

        return $generalId;
    }

    /**
     * 升级武将
     * @return bool 是否成功
     */
    public function levelUp() {
        if (!$this->isValid) {
            return false;
        }

        // 增加等级
        $newLevel = $this->level + 1;

        // 计算新属性
        $newAttack = $this->calculateNewAttribute('attack');
        $newDefense = $this->calculateNewAttribute('defense');
        $newSpeed = $this->calculateNewAttribute('speed');
        $newIntelligence = $this->calculateNewAttribute('intelligence');

        // 更新数据库
        $query = "UPDATE generals SET level = ?, attack = ?, defense = ?, speed = ?, intelligence = ? WHERE general_id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param('iiiiii', $newLevel, $newAttack, $newDefense, $newSpeed, $newIntelligence, $this->generalId);
        $result = $stmt->execute();
        $stmt->close();

        if ($result) {
            // 更新对象属性
            $this->level = $newLevel;
            $this->attack = $newAttack;
            $this->defense = $newDefense;
            $this->speed = $newSpeed;
            $this->intelligence = $newIntelligence;
            return true;
        }

        return false;
    }

    /**
     * 计算升级后的属性值
     * @param string $attribute 属性名称
     * @return int 新属性值
     */
    private function calculateNewAttribute($attribute) {
        $baseValue = $this->$attribute;
        $levelFactor = 1 + $this->level * 0.1;
        $costFactor = 1 + $this->cost * 0.2;

        if ($attribute == 'speed') {
            $levelFactor = 1 + $this->level * 0.05;
            $costFactor = 1 + $this->cost * 0.1;
        }

        return round($baseValue * $levelFactor * $costFactor);
    }

    /**
     * 获取升级费用
     * @return int 升级费用
     */
    public function getUpgradeCost() {
        $baseCost = 100; // 基础升级费用
        $levelFactor = 1 + $this->level * 0.5;
        $costFactor = 1 + $this->cost * 0.5;

        return round($baseCost * $levelFactor * $costFactor);
    }

    /**
     * 添加技能卡牌
     * @param string $skillName 技能名称
     * @param int $slot 技能槽位（0为自带技能，1-2为装备技能）
     * @param array $skillEffect 技能效果
     * @return bool 是否成功
     */
    public function addSkillCard($skillName, $slot, $skillEffect) {
        if (!$this->isValid) {
            return false;
        }

        // 检查槽位是否有效
        if ($slot < 0 || $slot > 2) {
            return false;
        }

        // 检查槽位是否已有技能
        foreach ($this->skills as $skill) {
            if ($skill->getSlot() == $slot) {
                // 如果是自带技能槽（0），不允许替换
                if ($slot == 0) {
                    return false;
                }

                // 如果是装备技能槽（1-2），先移除旧技能
                $skill->removeSkill();
                break;
            }
        }

        // 创建新技能
        $skillType = ($slot == 0) ? '自带' : '装备';
        $skill = new GeneralSkill();
        $skillId = $skill->createSkill($this->generalId, $skillName, $skillType, $slot, $skillEffect);

        if (!$skillId) {
            return false;
        }

        // 添加到技能列表
        $this->skills[] = $skill;
        return true;
    }

    /**
     * 移除技能卡牌
     * @param int $slot 技能槽位
     * @return bool 是否成功
     */
    public function removeSkillCard($slot) {
        if (!$this->isValid) {
            return false;
        }

        // 自带技能不能移除
        if ($slot == 0) {
            return false;
        }

        // 查找技能
        foreach ($this->skills as $key => $skill) {
            if ($skill->getSlot() == $slot) {
                if ($skill->removeSkill()) {
                    unset($this->skills[$key]);
                    $this->skills = array_values($this->skills); // 重新索引数组
                    return true;
                }
                break;
            }
        }

        return false;
    }

    /**
     * 分配武将
     * @param string $assignmentType 分配类型（city, army）
     * @param int $targetId 目标ID
     * @return bool 是否成功
     */
    public function assignGeneral($assignmentType, $targetId) {
        if (!$this->isValid) {
            return false;
        }

        // 检查分配类型是否有效
        $validTypes = ['city', 'army'];
        if (!in_array($assignmentType, $validTypes)) {
            return false;
        }

        // 检查目标是否存在
        if ($assignmentType == 'city') {
            $city = new City($targetId);
            if (!$city->isValid() || $city->getOwnerId() != $this->ownerId) {
                return false;
            }

            // 检查城池是否已达武将上限
            $cityGenerals = self::getCityGenerals($targetId);
            if (count($cityGenerals) >= $city->getLevel()) {
                return false;
            }
        } else if ($assignmentType == 'army') {
            $army = new Army($targetId);
            if (!$army->isValid() || $army->getOwnerId() != $this->ownerId) {
                return false;
            }

            // 检查军队是否已达武将上限
            $armyGenerals = self::getArmyGenerals($targetId);
            if (count($armyGenerals) >= 1 + $army->getLevel()) {
                return false;
            }
        }

        // 如果武将已分配，先取消分配
        if ($this->assignment) {
            $this->unassignGeneral();
        }

        // 创建新分配
        $assignment = new GeneralAssignment();
        $assignmentId = $assignment->createAssignment($this->generalId, $assignmentType, $targetId);

        if ($assignmentId) {
            $this->assignment = $assignment;
            return true;
        }

        return false;
    }

    /**
     * 取消分配
     * @return bool 是否成功
     */
    public function unassignGeneral() {
        if (!$this->isValid || !$this->assignment) {
            return false;
        }

        if ($this->assignment->cancelAssignment()) {
            $this->assignment = null;
            return true;
        }

        return false;
    }

    /**
     * 获取武将加成
     * @param string $type 加成类型
     * @return array 加成数组
     */
    public function getBonus($type) {
        if (!$this->isValid) {
            return [];
        }

        $bonus = [];

        // 基础属性加成
        switch ($type) {
            case 'city':
                // 城池加成
                $bonus['defense'] = $this->intelligence * 0.5 + $this->defense * 0.3;
                $bonus['production'] = $this->intelligence * 0.5;
                break;
            case 'army':
                // 军队加成
                $bonus['attack'] = $this->attack * 0.5;
                $bonus['defense'] = $this->defense * 0.3;
                $bonus['speed'] = $this->speed * 0.2;
                break;
        }

        // 技能加成
        foreach ($this->skills as $skill) {
            $skillEffect = $skill->getEffect();
            foreach ($skillEffect as $effectType => $effectValue) {
                if (isset($bonus[$effectType])) {
                    $bonus[$effectType] += $effectValue;
                } else {
                    $bonus[$effectType] = $effectValue;
                }
            }
        }

        return $bonus;
    }

    /**
     * 获取武将ID
     * @return int
     */
    public function getGeneralId() {
        return $this->generalId;
    }

    /**
     * 获取拥有者ID
     * @return int
     */
    public function getOwnerId() {
        return $this->ownerId;
    }

    /**
     * 获取武将名称
     * @return string
     */
    public function getName() {
        return $this->name;
    }

    /**
     * 获取武将来源
     * @return string
     */
    public function getSource() {
        return $this->source;
    }

    /**
     * 获取武将稀有度
     * @return string
     */
    public function getRarity() {
        return $this->rarity;
    }

    /**
     * 获取武将COST
     * @return float
     */
    public function getCost() {
        return $this->cost;
    }

    /**
     * 获取武将元素
     * @return string
     */
    public function getElement() {
        return $this->element;
    }

    /**
     * 获取武将等级
     * @return int
     */
    public function getLevel() {
        return $this->level;
    }

    /**
     * 获取武将HP
     * @return int
     */
    public function getHp() {
        return $this->hp;
    }

    /**
     * 获取武将最大HP
     * @return int
     */
    public function getMaxHp() {
        return $this->maxHp;
    }

    /**
     * 获取武将攻击力
     * @return int
     */
    public function getAttack() {
        return $this->attack;
    }

    /**
     * 获取武将守备力
     * @return int
     */
    public function getDefense() {
        return $this->defense;
    }

    /**
     * 获取武将速度
     * @return int
     */
    public function getSpeed() {
        return $this->speed;
    }

    /**
     * 获取武将智力
     * @return int
     */
    public function getIntelligence() {
        return $this->intelligence;
    }

    /**
     * 获取武将技能
     * @return array
     */
    public function getSkills() {
        return $this->skills;
    }

    /**
     * 获取武将分配信息
     * @return GeneralAssignment|null
     */
    public function getAssignment() {
        return $this->assignment;
    }

    /**
     * 检查武将是否有效
     * @return bool
     */
    public function isValid() {
        return $this->isValid;
    }

    /**
     * 获取用户的所有武将
     * @param int $userId 用户ID
     * @return array 武将数组
     */
    public static function getUserGenerals($userId) {
        $db = Database::getInstance()->getConnection();

        $query = "SELECT general_id FROM generals WHERE owner_id = ? AND is_active = 1";
        $stmt = $db->prepare($query);
        $stmt->bind_param('i', $userId);
        $stmt->execute();
        $result = $stmt->get_result();

        $generals = [];

        if ($result) {
            while ($row = $result->fetch_assoc()) {
                $general = new General($row['general_id']);
                if ($general->isValid()) {
                    $generals[] = $general;
                }
            }
        }

        $stmt->close();
        return $generals;
    }

    /**
     * 获取城池的所有武将
     * @param int $cityId 城池ID
     * @return array 武将数组
     */
    public static function getCityGenerals($cityId) {
        $db = Database::getInstance()->getConnection();

        $query = "SELECT g.general_id FROM generals g
                  JOIN general_assignments a ON g.general_id = a.general_id
                  WHERE a.assignment_type = 'city' AND a.target_id = ? AND g.is_active = 1";
        $stmt = $db->prepare($query);
        $stmt->bind_param('i', $cityId);
        $stmt->execute();
        $result = $stmt->get_result();

        $generals = [];

        if ($result) {
            while ($row = $result->fetch_assoc()) {
                $general = new General($row['general_id']);
                if ($general->isValid()) {
                    $generals[] = $general;
                }
            }
        }

        $stmt->close();
        return $generals;
    }

    /**
     * 获取军队的所有武将
     * @param int $armyId 军队ID
     * @return array 武将数组
     */
    public static function getArmyGenerals($armyId) {
        $db = Database::getInstance()->getConnection();

        $query = "SELECT g.general_id FROM generals g
                  JOIN general_assignments a ON g.general_id = a.general_id
                  WHERE a.assignment_type = 'army' AND a.target_id = ? AND g.is_active = 1";
        $stmt = $db->prepare($query);
        $stmt->bind_param('i', $armyId);
        $stmt->execute();
        $result = $stmt->get_result();

        $generals = [];

        if ($result) {
            while ($row = $result->fetch_assoc()) {
                $general = new General($row['general_id']);
                if ($general->isValid()) {
                    $generals[] = $general;
                }
            }
        }

        $stmt->close();
        return $generals;
    }

    /**
     * 随机生成武将
     * @param int $ownerId 拥有者ID
     * @param string $rarity 稀有度
     * @return bool|int 成功返回武将ID，失败返回false
     */
    public static function generateRandomGeneral($ownerId, $rarity = 'B') {
        // 检查稀有度是否有效
        $validRarities = ['B', 'A', 'S', 'SS', 'P'];
        if (!in_array($rarity, $validRarities)) {
            $rarity = 'B';
        }

        // 生成随机名称
        $firstNames = ['赵', '钱', '孙', '李', '周', '吴', '郑', '王', '冯', '陈', '褚', '卫', '蒋', '沈', '韩', '杨', '朱', '秦', '尤', '许'];
        $lastNames = ['云', '明', '辉', '杰', '峰', '强', '军', '平', '保', '东', '文', '辉', '力', '明', '永', '健', '世', '广', '志', '义'];
        $name = $firstNames[array_rand($firstNames)] . $lastNames[array_rand($lastNames)];

        // 生成随机来源
        $source = '原创角色';

        // 生成随机COST
        $cost = 0;
        switch ($rarity) {
            case 'P':
                $cost = 4.0;
                break;
            case 'SS':
                $cost = 3.5;
                break;
            case 'S':
                $cost = 3.0;
                break;
            case 'A':
                $cost = 2.0;
                break;
            case 'B':
                $cost = 1.0;
                break;
        }

        // 生成随机元素
        $elements = ['亮晶晶', '暖洋洋', '冷冰冰', '郁萌萌', '昼闪闪', '夜静静'];
        $element = $elements[array_rand($elements)];

        // 生成随机属性
        $attributes = [];

        // 根据元素设置属性倾向
        switch ($element) {
            case '亮晶晶': // 内政型
                $attributes['attack'] = mt_rand(10, 20);
                $attributes['defense'] = mt_rand(70, 80);
                $attributes['speed'] = mt_rand(40, 50);
                $attributes['intelligence'] = mt_rand(90, 100);
                break;
            case '暖洋洋': // 速攻型
                $attributes['attack'] = mt_rand(90, 100);
                $attributes['defense'] = mt_rand(10, 20);
                $attributes['speed'] = mt_rand(70, 80);
                $attributes['intelligence'] = mt_rand(40, 50);
                break;
            case '冷冰冰': // 防御型
                $attributes['attack'] = mt_rand(40, 50);
                $attributes['defense'] = mt_rand(90, 100);
                $attributes['speed'] = mt_rand(10, 20);
                $attributes['intelligence'] = mt_rand(40, 50);
                break;
            case '郁萌萌': // 强攻型
                $attributes['attack'] = mt_rand(90, 100);
                $attributes['defense'] = mt_rand(10, 20);
                $attributes['speed'] = mt_rand(70, 80);
                $attributes['intelligence'] = mt_rand(40, 50);
                break;
            case '昼闪闪': // 辅助型
                $attributes['attack'] = mt_rand(10, 20);
                $attributes['defense'] = mt_rand(40, 50);
                $attributes['speed'] = mt_rand(70, 80);
                $attributes['intelligence'] = mt_rand(90, 100);
                break;
            case '夜静静': // 特殊型
                $attributes['attack'] = mt_rand(10, 20);
                $attributes['defense'] = mt_rand(70, 80);
                $attributes['speed'] = mt_rand(40, 50);
                $attributes['intelligence'] = mt_rand(90, 100);
                break;
        }

        // 根据稀有度调整属性
        $rarityMultiplier = 1;
        switch ($rarity) {
            case 'P':
                $rarityMultiplier = 1.5;
                break;
            case 'SS':
                $rarityMultiplier = 1.3;
                break;
            case 'S':
                $rarityMultiplier = 1.2;
                break;
            case 'A':
                $rarityMultiplier = 1.1;
                break;
        }

        foreach ($attributes as $key => $value) {
            $attributes[$key] = round($value * $rarityMultiplier);
        }

        // 创建武将
        $general = new General();
        $generalId = $general->createGeneral($ownerId, $name, $source, $rarity, $cost, $element, $attributes);

        if ($generalId) {
            // 添加自带技能
            $skillName = self::getRandomSkillName($element);
            $skillEffect = self::getRandomSkillEffect($element);
            $general->addSkillCard($skillName, 0, $skillEffect);
        }

        return $generalId;
    }

    /**
     * 获取随机技能名称
     * @param string $element 元素类型
     * @return string 技能名称
     */
    private static function getRandomSkillName($element) {
        $skillNames = [
            '亮晶晶' => ['资源加速', '士兵训练加速', '资源爆发', '建筑加速', '税收增加'],
            '暖洋洋' => ['行军加速', '闪电行军', '火焰打击', '战斗爆发', '士气提升'],
            '冷冰冰' => ['防御强化', '铁壁防御', '冰霜护盾', '反击强化', '伤害减免'],
            '郁萌萌' => ['攻击强化', '战斗爆发', '自然之力', '生命汲取', '暴击强化'],
            '昼闪闪' => ['治疗', '光明祝福', '士气提升', '防御强化', '攻击强化'],
            '夜静静' => ['侦察强化', '隐匿行军', '暗影打击', '伏击强化', '夜视能力']
        ];

        $elementSkills = isset($skillNames[$element]) ? $skillNames[$element] : $skillNames['亮晶晶'];
        return $elementSkills[array_rand($elementSkills)];
    }

    /**
     * 获取随机技能效果
     * @param string $element 元素类型
     * @return array 技能效果
     */
    private static function getRandomSkillEffect($element) {
        $skillEffects = [
            '亮晶晶' => [
                ['production' => 10],
                ['build_speed' => 15],
                ['tax' => 10],
                ['population_growth' => 5],
                ['resource_capacity' => 10]
            ],
            '暖洋洋' => [
                ['attack' => 15],
                ['speed' => 10],
                ['morale' => 10],
                ['critical_hit' => 5],
                ['damage' => 10]
            ],
            '冷冰冰' => [
                ['defense' => 15],
                ['damage_reduction' => 10],
                ['counter_attack' => 5],
                ['shield' => 10],
                ['resistance' => 10]
            ],
            '郁萌萌' => [
                ['attack' => 15],
                ['critical_hit' => 10],
                ['life_steal' => 5],
                ['damage' => 10],
                ['penetration' => 5]
            ],
            '昼闪闪' => [
                ['healing' => 10],
                ['morale' => 10],
                ['defense' => 10],
                ['attack' => 10],
                ['buff_duration' => 15]
            ],
            '夜静静' => [
                ['scout_range' => 15],
                ['ambush' => 10],
                ['stealth' => 10],
                ['night_vision' => 10],
                ['detection' => 15]
            ]
        ];

        $elementEffects = isset($skillEffects[$element]) ? $skillEffects[$element] : $skillEffects['亮晶晶'];
        return $elementEffects[array_rand($elementEffects)];
    }
}
