# 种火集结号 - 优先级1：建筑完成检查系统
时间戳: 2025-04-09 22:30:00

## 建筑完成检查系统设计

### 1. 修改Facility类，添加建筑完成检查方法
```php
// 在Facility.php中添加以下方法

/**
 * 完成设施建造
 * @return bool
 */
public function completeConstruction() {
    if (!$this->isValid || !$this->isUnderConstruction()) {
        return false;
    }
    
    $now = time();
    $constructionTime = strtotime($this->constructionTime);
    
    if ($now < $constructionTime) {
        return false; // 建造尚未完成
    }
    
    // 完成建造
    $query = "UPDATE facilities SET construction_time = NULL WHERE facility_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('i', $this->facilityId);
    $result = $stmt->execute();
    $stmt->close();
    
    if ($result) {
        $this->constructionTime = null;
        return true;
    }
    
    return false;
}

/**
 * 检查并完成所有已完成建造的设施
 * @return array 完成建造的设施数组
 */
public static function checkAndCompleteConstruction() {
    $db = Database::getInstance()->getConnection();
    
    $now = date('Y-m-d H:i:s');
    
    $query = "SELECT facility_id FROM facilities WHERE construction_time IS NOT NULL AND construction_time <= ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param('s', $now);
    $stmt->execute();
    $result = $stmt->get_result();
    
    $completedFacilities = [];
    
    if ($result) {
        while ($row = $result->fetch_assoc()) {
            $facility = new Facility($row['facility_id']);
            if ($facility->isValid() && $facility->completeConstruction()) {
                // 获取设施所在的城池
                $city = new City($facility->getCityId());
                
                $completedFacilities[] = [
                    'facility_id' => $facility->getFacilityId(),
                    'city_id' => $facility->getCityId(),
                    'city_name' => $city->isValid() ? $city->getName() : '',
                    'type' => $facility->getType(),
                    'subtype' => $facility->getSubtype(),
                    'name' => $facility->getName(),
                    'level' => $facility->getLevel()
                ];
            }
        }
    }
    
    $stmt->close();
    return $completedFacilities;
}

/**
 * 检查并完成所有已完成升级的设施
 * @return array 完成升级的设施数组
 */
public static function checkAndCompleteUpgrade() {
    $db = Database::getInstance()->getConnection();
    
    $now = date('Y-m-d H:i:s');
    
    $query = "SELECT facility_id FROM facilities WHERE upgrade_time IS NOT NULL AND upgrade_time <= ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param('s', $now);
    $stmt->execute();
    $result = $stmt->get_result();
    
    $completedFacilities = [];
    
    if ($result) {
        while ($row = $result->fetch_assoc()) {
            $facility = new Facility($row['facility_id']);
            if ($facility->isValid() && $facility->completeUpgrade()) {
                // 获取设施所在的城池
                $city = new City($facility->getCityId());
                
                $completedFacilities[] = [
                    'facility_id' => $facility->getFacilityId(),
                    'city_id' => $facility->getCityId(),
                    'city_name' => $city->isValid() ? $city->getName() : '',
                    'type' => $facility->getType(),
                    'subtype' => $facility->getSubtype(),
                    'name' => $facility->getName(),
                    'level' => $facility->getLevel()
                ];
            }
        }
    }
    
    $stmt->close();
    return $completedFacilities;
}
```

### 2. 创建建筑完成检查脚本 (cron_building_completion.php)
```php
<?php
// 包含初始化文件
require_once 'includes/init.php';

// 检查并完成所有已完成建造的设施
$completedConstructions = Facility::checkAndCompleteConstruction();

// 检查并完成所有已完成升级的设施
$completedUpgrades = Facility::checkAndCompleteUpgrade();

// 记录完成的建造和升级
if (!empty($completedConstructions)) {
    error_log('Completed constructions: ' . json_encode($completedConstructions));
}

if (!empty($completedUpgrades)) {
    error_log('Completed upgrades: ' . json_encode($completedUpgrades));
}
```

### 3. 创建建筑完成检查API (api/check_building_completion.php)
```php
<?php
// 包含初始化文件
require_once '../includes/init.php';

// 设置响应头
header('Content-Type: application/json');

// 检查用户是否已登录
if (!isset($_SESSION['user_id'])) {
    echo json_encode([
        'success' => false,
        'message' => '未登录'
    ]);
    exit;
}

// 获取用户的所有城池
$cities = City::getUserCities($_SESSION['user_id']);
$cityIds = [];

foreach ($cities as $city) {
    $cityIds[] = $city->getCityId();
}

// 如果用户没有城池，直接返回
if (empty($cityIds)) {
    echo json_encode([
        'success' => true,
        'completed_constructions' => [],
        'completed_upgrades' => []
    ]);
    exit;
}

// 检查用户城池中的设施建造完成情况
$completedConstructions = [];
$completedUpgrades = [];

$db = Database::getInstance()->getConnection();
$now = date('Y-m-d H:i:s');

// 检查建造完成的设施
$constructionQuery = "SELECT f.facility_id FROM facilities f 
                      JOIN cities c ON f.city_id = c.city_id 
                      WHERE c.owner_id = ? AND f.construction_time IS NOT NULL AND f.construction_time <= ?";
$constructionStmt = $db->prepare($constructionQuery);
$constructionStmt->bind_param('is', $_SESSION['user_id'], $now);
$constructionStmt->execute();
$constructionResult = $constructionStmt->get_result();

if ($constructionResult) {
    while ($row = $constructionResult->fetch_assoc()) {
        $facility = new Facility($row['facility_id']);
        if ($facility->isValid() && $facility->completeConstruction()) {
            // 获取设施所在的城池
            $city = new City($facility->getCityId());
            
            $completedConstructions[] = [
                'facility_id' => $facility->getFacilityId(),
                'city_id' => $facility->getCityId(),
                'city_name' => $city->isValid() ? $city->getName() : '',
                'type' => $facility->getType(),
                'subtype' => $facility->getSubtype(),
                'name' => $facility->getName(),
                'level' => $facility->getLevel()
            ];
        }
    }
}

$constructionStmt->close();

// 检查升级完成的设施
$upgradeQuery = "SELECT f.facility_id FROM facilities f 
                 JOIN cities c ON f.city_id = c.city_id 
                 WHERE c.owner_id = ? AND f.upgrade_time IS NOT NULL AND f.upgrade_time <= ?";
$upgradeStmt = $db->prepare($upgradeQuery);
$upgradeStmt->bind_param('is', $_SESSION['user_id'], $now);
$upgradeStmt->execute();
$upgradeResult = $upgradeStmt->get_result();

if ($upgradeResult) {
    while ($row = $upgradeResult->fetch_assoc()) {
        $facility = new Facility($row['facility_id']);
        if ($facility->isValid() && $facility->completeUpgrade()) {
            // 获取设施所在的城池
            $city = new City($facility->getCityId());
            
            $completedUpgrades[] = [
                'facility_id' => $facility->getFacilityId(),
                'city_id' => $facility->getCityId(),
                'city_name' => $city->isValid() ? $city->getName() : '',
                'type' => $facility->getType(),
                'subtype' => $facility->getSubtype(),
                'name' => $facility->getName(),
                'level' => $facility->getLevel()
            ];
        }
    }
}

$upgradeStmt->close();

// 返回完成的建造和升级
echo json_encode([
    'success' => true,
    'completed_constructions' => $completedConstructions,
    'completed_upgrades' => $completedUpgrades
]);
```

### 4. 修改前端JavaScript，定期检查建筑完成情况 (script.js)
```javascript
// 在script.js中添加以下代码

// 检查建筑完成情况
function checkBuildingCompletion() {
    fetch('api/check_building_completion.php')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // 处理完成的建造
                if (data.completed_constructions && data.completed_constructions.length > 0) {
                    data.completed_constructions.forEach(facility => {
                        showNotification(`${facility.city_name} 的 ${facility.name} 建造完成！`);
                        
                        // 如果当前页面是城池页面，刷新城池视图
                        if (window.location.pathname.includes('city.php') || window.location.pathname.includes('index.php')) {
                            refreshCityView();
                        }
                    });
                }
                
                // 处理完成的升级
                if (data.completed_upgrades && data.completed_upgrades.length > 0) {
                    data.completed_upgrades.forEach(facility => {
                        showNotification(`${facility.city_name} 的 ${facility.name} 升级到 ${facility.level} 级！`);
                        
                        // 如果当前页面是城池页面，刷新城池视图
                        if (window.location.pathname.includes('city.php') || window.location.pathname.includes('index.php')) {
                            refreshCityView();
                        }
                    });
                }
            }
        })
        .catch(error => console.error('Error checking building completion:', error));
}

// 刷新城池视图
function refreshCityView() {
    // 获取当前城池ID
    const cityId = document.querySelector('.city-view').getAttribute('data-city-id');
    
    if (cityId) {
        fetch(`api/get_city_info.php?city_id=${cityId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // 更新城池视图
                    updateCityView(data.city);
                }
            })
            .catch(error => console.error('Error refreshing city view:', error));
    }
}

// 更新城池视图
function updateCityView(city) {
    // 清空现有的城池网格
    const cityGrid = document.querySelector('.city-grid');
    cityGrid.innerHTML = '';
    
    // 创建24x24的网格
    for (let y = 0; y < 24; y++) {
        const row = document.createElement('div');
        row.className = 'city-row';
        
        for (let x = 0; x < 24; x++) {
            let facilityFound = false;
            
            // 检查该位置是否有设施
            for (let i = 0; i < city.facilities.length; i++) {
                const facility = city.facilities[i];
                
                if (facility.x_pos == x && facility.y_pos == y) {
                    const cell = document.createElement('div');
                    cell.className = `city-cell facility ${facility.type}`;
                    cell.setAttribute('data-facility-id', facility.facility_id);
                    
                    const facilityName = document.createElement('span');
                    facilityName.className = 'facility-name';
                    facilityName.textContent = facility.name;
                    
                    const facilityLevel = document.createElement('span');
                    facilityLevel.className = 'facility-level';
                    facilityLevel.textContent = `Lv.${facility.level}`;
                    
                    cell.appendChild(facilityName);
                    cell.appendChild(facilityLevel);
                    
                    // 添加点击事件
                    cell.addEventListener('click', function() {
                        window.location.href = `facility.php?id=${facility.facility_id}`;
                    });
                    
                    row.appendChild(cell);
                    facilityFound = true;
                    break;
                }
            }
            
            // 如果没有设施，显示空格子
            if (!facilityFound) {
                const cell = document.createElement('div');
                cell.className = 'city-cell empty';
                cell.setAttribute('data-x', x);
                cell.setAttribute('data-y', y);
                
                // 添加点击事件
                cell.addEventListener('click', function() {
                    window.location.href = `build.php?city_id=${city.city_id}&x=${x}&y=${y}`;
                });
                
                row.appendChild(cell);
            }
        }
        
        cityGrid.appendChild(row);
    }
}

// 每30秒检查一次建筑完成情况
setInterval(checkBuildingCompletion, 30000);

// 页面加载完成后立即检查一次建筑完成情况
document.addEventListener('DOMContentLoaded', function() {
    checkBuildingCompletion();
    
    // 其他初始化代码...
});
```
